#!/usr/bin/env node

/**
 * Productivity Hub - Setup Script
 * Automatiza a configura√ß√£o inicial do projeto
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const rootDir = path.join(__dirname, '..');

console.log('üöÄ Configurando Productivity Hub...\n');

// Cores para o terminal
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

const step = (step, message) => {
  log(`[${step}/7] ${message}`, 'cyan');
};

try {
  // Passo 1: Verificar Node.js
  step(1, 'Verificando vers√£o do Node.js...');
  const nodeVersion = process.version;
  const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
  
  if (majorVersion < 18) {
    log('‚ùå Node.js 18+ √© necess√°rio. Vers√£o atual: ' + nodeVersion, 'red');
    log('üì• Baixe em: https://nodejs.org/', 'yellow');
    process.exit(1);
  }
  log(`‚úÖ Node.js ${nodeVersion} OK`, 'green');

  // Passo 2: Verificar se √© um novo projeto
  step(2, 'Verificando estrutura do projeto...');
  const packageJsonPath = path.join(rootDir, 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    log('‚ùå package.json n√£o encontrado. Execute na raiz do projeto.', 'red');
    process.exit(1);
  }
  log('‚úÖ Estrutura do projeto OK', 'green');

  // Passo 3: Instalar depend√™ncias
  step(3, 'Instalando depend√™ncias...');
  log('üì¶ Executando npm install...', 'yellow');
  execSync('npm install', { 
    cwd: rootDir, 
    stdio: 'inherit' 
  });
  log('‚úÖ Depend√™ncias instaladas', 'green');

  // Passo 4: Configurar arquivo .env
  step(4, 'Configurando vari√°veis de ambiente...');
  const envPath = path.join(rootDir, '.env');
  const envExamplePath = path.join(rootDir, '.env.example');
  
  if (!fs.existsSync(envPath)) {
    if (fs.existsSync(envExamplePath)) {
      fs.copyFileSync(envExamplePath, envPath);
      log('‚úÖ Arquivo .env criado a partir do .env.example', 'green');
      log('‚ö†Ô∏è  Configure suas API keys no arquivo .env', 'yellow');
    } else {
      log('‚ùå .env.example n√£o encontrado', 'red');
    }
  } else {
    log('‚úÖ Arquivo .env j√° existe', 'green');
  }

  // Passo 5: Verificar Git
  step(5, 'Configurando Git...');
  try {
    execSync('git --version', { stdio: 'ignore' });
    
    if (!fs.existsSync(path.join(rootDir, '.git'))) {
      log('üìù Inicializando reposit√≥rio Git...', 'yellow');
      execSync('git init', { cwd: rootDir, stdio: 'ignore' });
      execSync('git add .', { cwd: rootDir, stdio: 'ignore' });
      execSync('git commit -m "Initial commit"', { cwd: rootDir, stdio: 'ignore' });
    }
    log('‚úÖ Git configurado', 'green');
  } catch (error) {
    log('‚ö†Ô∏è  Git n√£o encontrado, pulando configura√ß√£o', 'yellow');
  }

  // Passo 6: Verificar build
  step(6, 'Testando build do projeto...');
  try {
    log('üî® Executando build de teste...', 'yellow');
    execSync('npm run build', { 
      cwd: rootDir, 
      stdio: 'pipe' 
    });
    log('‚úÖ Build funcionando corretamente', 'green');
  } catch (error) {
    log('‚ùå Erro no build:', 'red');
    console.error(error.stdout?.toString() || error.message);
    log('‚ö†Ô∏è  Verifique as depend√™ncias e tente novamente', 'yellow');
  }

  // Passo 7: Instru√ß√µes finais
  step(7, 'Finalizando configura√ß√£o...');
  
  console.log('\n' + '='.repeat(60));
  log('üéâ PRODUCTIVITY HUB CONFIGURADO COM SUCESSO!', 'green');
  console.log('='.repeat(60));
  
  console.log('\nüìã PR√ìXIMOS PASSOS:\n');
  
  log('1. Configure suas API keys:', 'cyan');
  log('   ‚Ä¢ Edite o arquivo .env', 'yellow');
  log('   ‚Ä¢ Adicione sua OpenAI API key (obrigat√≥rio)', 'yellow');
  
  log('\n2. Inicie o servidor de desenvolvimento:', 'cyan');
  log('   npm run dev', 'green');
  
  log('\n3. Acesse o aplicativo:', 'cyan');
  log('   http://localhost:3000', 'green');
  
  log('\n4. Configure as integra√ß√µes:', 'cyan');
  log('   ‚Ä¢ Clique no √≠cone de chave no header', 'yellow');
  log('   ‚Ä¢ Siga as instru√ß√µes para OpenAI', 'yellow');
  
  console.log('\nüìñ Documenta√ß√£o completa: README.md');
  console.log('üêõ Problemas? Verifique o troubleshooting no README');
  
  log('\nüöÄ Pronto para ser produtivo!', 'magenta');

} catch (error) {
  log('\n‚ùå ERRO DURANTE A CONFIGURA√á√ÉO:', 'red');
  console.error(error.message);
  
  log('\nüîß SOLU√á√ïES POSS√çVEIS:', 'yellow');
  log('‚Ä¢ Verifique sua conex√£o com a internet', 'yellow');
  log('‚Ä¢ Execute: rm -rf node_modules && npm install', 'yellow');
  log('‚Ä¢ Verifique se tem permiss√µes de escrita na pasta', 'yellow');
  log('‚Ä¢ Consulte o README.md para mais ajuda', 'yellow');
  
  process.exit(1);
}